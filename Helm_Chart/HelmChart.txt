


=================================== Commands: ==============================================

https://helm.sh/docs/helm/helm_completion/


help:
	helm --help

Create:
	- helm list ( list all installed package )
	- helm lint ./collection-server-helm-chart
	- helm create <chart name> 
		creates the helm folder structure
	
Install:	
	- helm install --dry-run --debug ./mychart
	- helm install <chart-name> ./folder_name
	- helm install helm-chart /path/helm-chart -f <values-file.yaml> -f <sbom.yaml> (using external value files and bom file)
		* helm install cls-bom-integration ./collection-server-helm-chart -f ./values.yaml -f ./bom_collection_server.yaml
	
Uninstall:	
	- helm uninstall <chart name>
		* helm uninstall cls-bom-integration	

Upgrade:	
	- helm upgrade <chart-name> 

update:	
	- helm dependency update <chart-name>

Package:	
	- helm package <chart-name>  ( create *.tgz file from the helm folder content)
		* helm package collection-server-helm-chart


search:
	https://helm.sh/docs/helm/helm_search/
	https://helm.sh/docs/helm/helm_search_repo/

	- helm search repo --devel
		* --devel  use development versions (alpha, beta, and release candidate releases), too. Equivalent to version '>0.0.0-0'. If --version is set, this is ignored
		* If you specify the --devel flag, the output will include pre-release versions. If you want to search using a version constraint, use --version.

Testing:
	helm install --dry-run --disable-openapi-validation moldy-jaguar ./mychart

File structure:
	https://helm.sh/docs/topics/charts/

	sample:
		wordpress/
		  Chart.yaml          # A YAML file containing information about the chart
		  LICENSE             # OPTIONAL: A plain text file containing the license for the chart
		  README.md           # OPTIONAL: A human-readable README file
		  values.yaml         # The default configuration values for this chart
		  values.schema.json  # OPTIONAL: A JSON Schema for imposing a structure on the values.yaml file
		  charts/             # A directory containing any charts upon which this chart depends.
		  crds/               # Custom Resource Definitions
		  templates/          # A directory of templates that, when combined with values,
		                      # will generate valid Kubernetes manifest files.
		  templates/NOTES.txt # OPTIONAL: A plain text file containing short usage notes


================== check rendered template: ========================

	Once the Helm chart is installed, the rendered manifest files are not typically accessible directly, as they are managed by Helm and applied to the cluster on your behalf. However, you can inspect the rendered templates by running helm template <release-name> <chart-directory>, which will output the rendered YAML files without actually deploying them.

	helm list | grep <release-name>
	helm template <release-name> <chart-directory>
	helm template esmlclmf ./esmlclmf


===================== helm:	repo search / update:=============================

	https://stackoverflow.com/questions/55973901/how-can-i-list-all-available-charts-under-a-helm-repo
	First, always update your local cache:
		helm repo update
	Then, you can list all charts by doing:

		helm search repo
		sudo helm search repo localrepo

	Or, you can do a case insensitive match on any part of chart name using the following:

		helm search repo [your_search_string]
	Lastly, if you want to list all the versions you can use the -l/--version argument:

	# Lists all versions of all charts
		helm search repo -l 

	# Lists all versions of all chart names that contain search string
		helm search repo -l [your_search_string]	


================== dynamic value substitution =================

Generally dynamic value substitution using go template needs key to have some value, otherwise it will give some space error


=============== helm index and add =======================

repo index:
	https://helm.sh/docs/helm/helm_repo_index/
	* The helm repo index command will generate an index file based on a given local directory that contains packaged charts.
	* /usr/local/bin/helm repo index /home/{{ cloud_user }}/kube-artifacts/stakater/ --url=http://localhost:8000/stakater

repo add:
		* /usr/local/bin/helm repo add lr-stakater http://localhost:8000/stakater


----------------- helm value files ------------

	https://helm.sh/docs/chart_template_guide/values_files/


================= Helm postgres-operator: ==============================

https://artifacthub.io/packages/helm/commonground/postgres-operator
Postgres Operator creates and manages PostgreSQL clusters running in Kubernetes


================= install helm ======================
	https://helm.sh/

	* curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
	* ./get_helm.sh 


=================== HELM ARTIFACT HUB ==========================

https://artifacthub.io/


======================= helm go template: =======================


	- template (common-lib) can be created and include those template in other helm template
		sample:

			env:
				{{ include "common.envvars.ldapbase" . | indent 12 }}

	- variable declaration for conditional value association
			sample:

				command:
            - bash
            - -c
				{{- $dashboard_container_command := "" }}
				
				{{- if has .Values.vnf_flavor .Values.dashboard.container.gmlc_slp }}
				{{- $dashboard_container_command = cat $dashboard_container_command .Values.dashboard.command.gmlc_slp }}
				{{- end }}
				
				{{- $dashboard_container_command = cat $dashboard_container_command .Values.dashboard.command.common }}
				            - {{ $dashboard_container_command | quote }}  (put command in quote)  	      



   - check if variable present in list

   	sample:
   		
   		{{- if has .Values.vnf_flavor .Values.dashboard.init_containers.lmf_init_flavors }}
			{{- $lmf_init_command = cat $lmf_init_command "/opt/tcs/positioningpca/bin/dashboard_init.sh /mnt/lmf-meta/ /mnt/init/"  }}
			{{- end  }}

			e.g. lmf_init_flavors: ["esme","esmv","lmfe","lmfv","e911","vas"]

==================== helm redis ===============================================

helm install -f /home/centos/manifests/helm/dash-redis-values.yaml dash-redis bitnami-helm-charts/redis

====================== comtech Helm Liquibase ======================================

[centos@zc415smlc01kma001 manifests]$ kubectl delete -f ~/manifests/app-liquibase.yaml
[centos@zc415smlc01kma001 manifests]$ kubectl create -f ~/manifests/app-liquibase.yaml


======================= Comtech Helm rfsp setup =====================================
go to folder where  'rfsp-server-helm-chart' exist
sudo helm delete rfspserver
helm install rfspserver rfsp-server-helm-chart
kubectl logs -f c415-rfsp-server-6f64844bcd-pxw8z -c rfspserver-app
 
======================== Comtech Helm Configuration ==================================
apiVersion: ""
generated: "0001-01-01T00:00:00Z"
repositories:
- caFile: ""
  certFile: ""
  insecure_skip_tls_verify: false
  keyFile: ""
  name: helm-development-virtual
  password: u3oI8IPG1iesGg6jRisC
  url: https://artifactory.comtech-idn.com/artifactory/helm-development-virtual
  username: woll.ci


======================== Comtech helm install Kafka ================================

check:
	Always check kadalu storage service is running.
	 
curl -u woll.ci:AP6ZhTZhtynxFjYXur1rqFLHPoReWVXHy3Uz5t --output kafka-14.1.1.tgz https://artifactory.comtech-idn.com/artifactory/helm-development-virtual/comtechtel/dlp/kafka/kafka-14.1.1.tgz

sudo helm delete kafka
kubectl get pvc
kubectl delete pvc data-kafka-0
kubectl delete pvc data-kafka-1
kubectl delete pvc data-kafka-2
kubectl delete pvc data-kafka-zookeeper-0

cd kube-artifacts/bitnami-helm-charts/
sudo helm install kafka -f /home/centos/manifests/helm/dlp-kafka-values.yaml kafka ****
helm install kafka -f /home/centos/manifests/helm/dlp-kafka-values.yaml kafka-14.1.1.tgz
sudo helm install kafka -f manifests/helm/dlp-kafka-values.yaml localrepo/kafka

working:
	helm install kafka -f /home/centos/manifests/helm/dlp-kafka-values.yaml kafka-13.1.5.tgz

debug mode:
	helm install kafka -f /home/centos/manifests/helm/dlp-kafka-values.yaml kafka-13.1.5.tgz -- debug

helm status kafka:
------------------
Kafka can be accessed by consumers via port 9092 on the following DNS name from within your cluster:

    kafka.default.svc.cluster.local

Each Kafka broker can be accessed by producers via port 9092 on the following DNS name(s) from within your cluster:

    kafka-0.kafka-headless.default.svc.cluster.local:9092
    kafka-1.kafka-headless.default.svc.cluster.local:9092
    kafka-2.kafka-headless.default.svc.cluster.local:9092

To create a pod that you can use as a Kafka client run the following commands:

    kubectl run kafka-client --restart='Never' --image localhost:5000/bitnami/kafka:2.6.0-debian-10-r78 --namespace default --command -- sleep infinity
    kubectl exec --tty -i kafka-client --namespace default -- bash

    PRODUCER:
        kafka-console-producer.sh \

            --broker-list kafka-0.kafka-headless.default.svc.cluster.local:9092,kafka-1.kafka-headless.default.svc.cluster.local:9092,kafka-2.kafka-headless.default.svc.cluster.local:9092 \
            --topic test

    CONSUMER:
        kafka-console-consumer.sh \

            --bootstrap-server kafka.default.svc.cluster.local:9092 \
            --topic test \
            --from-beginning


========================= comtech rfsp helm install ===================================

1. Copy helm repository to Admin VM

2. Install latest docker images in worker1/worker2

3. helm install <rfspserver> <chart-folder-Name>	# <name> <package/package.tgz> install package and deploy kubernetes yml file

4. helm list 																		# verify helm rfspServer package was installed 	

5. helm package <chart-folder-Name>  						# create package.tgz file	

6. curl -X PUT -u woll.ci:AP6ZhTZhtynxFjYXur1rqFLHPoReWVXHy3Uz5t -T rfsp-server-helm-chart-1.1.0.tgz https://artifactory.comtech-idn.com/artifactory/helm-development-virtual/comtechtel/location/rfsp/rfspserver/rfsp-server-helm-chart-1.1.0.tgz

=========================== comtech postgres Helm chart setup ==============================

--------- comtech helm potgres setup ------
sudo helm delete postgresql
kubectl get pvc
kubectl delete pvc data-postgresql-postgresql-ha-postgresql-0
kubectl delete pvc data-postgresql-postgresql-ha-postgresql-1
cd /home/centos/kube-artifacts/bitnami-helm-charts
sudo helm install postgresql postgresql-ha
sudo helm install -f /home/centos/manifests/helm/dlp-pgsql-values.yaml postgresql postgresql-ha

-------------------------------------------

- /usr/local/bin/helm uninstall postgresql 
	- uninstall postgresql helm chart

- kubectl get deployments
	NAME                              READY   UP-TO-DATE   AVAILABLE   AGE
	c415-collectionserver             1/1     1            1           12d
	postgresql-postgresql-ha-pgpool   1/1     1            1           75m
	zc55smlc01lmf-rfsp-server         1/1     1            1           71m

- sudo su 
	- ( switch to super user before running helm)

- /usr/local/bin/helm install postgresql --set persistence.enabled=false,replication.enabled=true,postgresql.password=admin localrepo/postgresql-ha
	- install postgresql helm chart

- kubectl expose deployment postgresql-postgresql-ha-pgpool --name postgres --type NodePort --protocol TCP --port 5432 
	
	* expose postgres HA proxy as postgres NodePort service with port 31133 to access from outside

- kubctl get svc
	postgres   NodePort    10.101.189.164   <none>        5432:31133/TCP               7m53s
	
- kubectl delete svc postgres
	- delete postgres NodePort Service created from postgresql-postgresql-ha-pgpool

- DB Client Access of HA postgres
	- Access DB client with url (jdbc:postgresql://10.80.22.186:31133/postgres)
	- Configure DB client u/p: postgres/admin

- Java Spring access of HA postgres
	- spring.datasource.url=jdbc:postgresql://<Admin-VM-IP>:<NodePort-IP>/postgres
	- spring.datasource.url=jdbc:postgresql://10.80.22.186:31133/postgres





=============================== Getting Started ==========================================

- https://kubernetes.io/blog/2016/10/helm-charts-making-it-simple-to-package-and-deploy-apps-on-kubernetes/
- https://helm.sh/docs/intro/using_helm/
- https://www.freecodecamp.org/news/what-is-a-helm-chart-tutorial-for-kubernetes-beginners/ ****
- https://www.bmc.com/blogs/kubernetes-helm-charts/
- https://helm.sh/docs/chart_template_guide/
- https://helm.sh/docs/chart_template_guide/accessing_files/

Git Samples Repository:
	- https://github.com/khaosdoctor/zaqar/tree/master/helm/zaqar


overview:
	- Helm Charts are simply Kubernetes YAML manifests combined into a single package that can be advertised to your Kubernetes clusters. Once packaged, installing a Helm Chart into your cluster is as easy as running a single helm install, which really simplifies the deployment of containerized applications
    
    - To create, run “helm create YOUR-CHART-NAME”. Once this is created, the directory structure should look like:

	- If you want to download and look at the files for a published chart, without installing it, you can do so with helm pull chartrepo/chartname

	- Once you have defined dependencies, you can run helm dependency update and it will use your dependency file to download all the specified charts into your charts/ directory for you.

Tags and Condition Resolution:
	- Conditions (when set in values) always override tags. The first condition path that exists wins and subsequent ones for that chart are ignored.
	- The tags: key in values must be a top level key. Globals and nested tags: tables are not currently supported.

Values:
	- values can be picked from chart.yml / values.yml
	- .Chart.Version 	(from chart.yml)
	- .Values.image.tag (from values.yml)

Chart Template Guide:
	- https://helm.sh/docs/chart_template_guide/	

Helm for K8s configMap and Secrets:
	- https://www.nclouds.com/blog/simplify-kubernetes-deployments-with-helm-part-1/
	- https://www.nclouds.com/blog/simplify-kubernetes-deployments-helm-part-2/
	- https://www.nclouds.com/blog/simplify-kubernetes-deployments-helm-part-3-creating-configmaps-secrets/

Helm Repository:
	- When Helm looks for an index.yaml file it's actually looking for the list of available versions of that chart, their SHA256 digests, and the location of the packaged .tgz file to download the chart itself

Helm local Path:
	- https://stackoverflow.com/questions/62924278/where-are-helm-charts-stored-locally
	- $HOME/.cache/helm/repository
		* contains cacheing of index.yml
		* index.yml contains app versions and urls
		* Samples:
			.cache/helm/repository/helm-development-virtual-index.yaml

	- $HOME/.config/helm/repositories.yaml	
		* contains repository url configuration